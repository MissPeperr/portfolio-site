{"version":3,"sources":["components/mainpage/mainpage.js","App.js","components/navbar/navbar.js","serviceWorker.js","index.js"],"names":["MainPage","react_default","a","createElement","Fragment","id","reactstrap_es","href","Component","App","className","mainpage_MainPage","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yRAIqBA,0LAGb,OACIC,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACIH,EAAAC,EAAAC,cAAA,OAAKE,GAAG,cACJJ,EAAAC,EAAAC,cAAA,OAAKE,GAAG,aACJJ,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,OAAKE,GAAG,gBACJJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAASD,GAAG,gBAAgBE,KAAK,aAAjC,YACAN,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAASD,GAAG,eAAeE,KAAK,gBAAhC,YACAN,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAASD,GAAG,iBAAiBE,KAAK,kBAAlC,qBAIZN,EAAAC,EAAAC,cAAA,OAAKE,GAAG,YACRJ,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,o6BAEJF,EAAAC,EAAAC,cAAA,OAAKE,GAAG,mBACRJ,EAAAC,EAAAC,cAAA,OAAKE,GAAG,eACRJ,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,oCACAF,EAAAC,EAAAC,cAAA,OAAKE,GAAG,mBACJJ,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,uCACAF,EAAAC,EAAAC,cAAA,k6BACAF,EAAAC,EAAAC,cAAA,oCACAF,EAAAC,EAAAC,cAAA,uCACAF,EAAAC,EAAAC,cAAA,o6BAGRF,EAAAC,EAAAC,cAAA,OAAKE,GAAG,kBACRJ,EAAAC,EAAAC,cAAA,OAAKE,GAAG,iBACJJ,EAAAC,EAAAC,cAAA,mCACAF,EAAAC,EAAAC,cAAA,uDApCkBK,sBCavBC,GCNqBD,yMDHhC,OACEP,EAAAC,EAAAC,cAAA,OAAKO,UAAU,OAEXT,EAAAC,EAAAC,cAACQ,EAAD,cALQH,cEIEI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRNC,IAASC,OAAOjB,EAAAC,EAAAC,cAACgB,EAAD,MAASC,SAASC,eAAe,SDiH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.6a7ef53f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { NavLink } from 'reactstrap';\nimport './mainpage.css';\n\nexport default class MainPage extends Component {\n\n    render(){\n        return (\n            <React.Fragment>\n                <div id=\"header-div\">\n                    <div id=\"hello-div\">\n                        <h2>Madison Peper</h2>\n                        <div id=\"nav-link-div\">\n                            <NavLink id=\"about-me-link\" href=\"#about-me\">About Me</NavLink>\n                            <NavLink id=\"project-link\" href=\"#project-div\">Projects</NavLink>\n                            <NavLink id=\"tech-used-link\" href=\"#tech-used-div\">What I've Used</NavLink>\n                        </div>\n                    </div>\n                </div>\n                <div id=\"about-me\">\n                <br></br>\n                    <h2>Who am I?</h2>\n                    <p> Attack feet groom forever, stretch tongue and leave it slightly out, blep and cat not kitten around so hide at bottom of staircase to trip human and purr when being pet so sleep on keyboard. Walk on car leaving trail of paw prints on hood and windshield. Kitten is playing with dead mouse sleep on my human's head but if it fits, i sits eat a plant, kill a hand. Purr while eating kitty scratches couch bad kitty, so attempt to leap between furniture but woefully miscalibrate and bellyflop onto the floor; what's your problem? i meant to do that now i shall wash myself intently. Allways wanting food cats making all the muffins. Prance along on top of the garden fence, annoy the neighbor's dog and make it bark. Sun bathe. Purr for no reason. Rub face on owner stare at the wall, play with food and get confused by dust fall asleep upside-down play riveting piece on synthesizer keyboard. Meow in empty rooms hack.</p>\n                </div>\n                <div id=\"parallax-space\"></div>\n                <div id=\"project-div\">\n                <br></br>\n                    <h2>What have I worked on?</h2>\n                    <div id=\"collectable-div\">\n                        <h4>CollectAble</h4>\n                        <p>DON'T FORGET TO ADD A LINK</p>\n                        <p>Attack feet groom forever, stretch tongue and leave it slightly out, blep and cat not kitten around so hide at bottom of staircase to trip human and purr when being pet so sleep on keyboard. Walk on car leaving trail of paw prints on hood and windshield. Kitten is playing with dead mouse sleep on my human's head but if it fits, i sits eat a plant, kill a hand. Purr while eating kitty scratches couch bad kitty, so attempt to leap between furniture but woefully miscalibrate and bellyflop onto the floor; what's your problem? i meant to do that now i shall wash myself intently. Allways wanting food cats making all the muffins. Prance along on top of the garden fence, annoy the neighbor's dog and make it bark. Sun bathe. Purr for no reason. Rub face on owner stare at the wall, play with food and get confused by dust fall asleep upside-down play riveting piece on synthesizer keyboard. Meow in empty rooms hack.</p>\n                        <h4>2nd Project Goes Here!</h4>\n                        <p>DON'T FORGET TO ADD A LINK</p>\n                        <p>Attack feet groom forever, stretch tongue and leave it slightly out, blep and cat not kitten around so hide at bottom of staircase to trip human and purr when being pet so sleep on keyboard. Walk on car leaving trail of paw prints on hood and windshield. Kitten is playing with dead mouse sleep on my human's head but if it fits, i sits eat a plant, kill a hand. Purr while eating kitty scratches couch bad kitty, so attempt to leap between furniture but woefully miscalibrate and bellyflop onto the floor; what's your problem? i meant to do that now i shall wash myself intently. Allways wanting food cats making all the muffins. Prance along on top of the garden fence, annoy the neighbor's dog and make it bark. Sun bathe. Purr for no reason. Rub face on owner stare at the wall, play with food and get confused by dust fall asleep upside-down play riveting piece on synthesizer keyboard. Meow in empty rooms hack.</p>\n                    </div>\n                </div>\n                <div id=\"parallax-nash\"></div>\n                <div id=\"tech-used-div\">\n                    <h4>What I've worked with</h4>\n                    <p>insert a bunch of images of stuff</p>\n                </div>\n            </React.Fragment>\n        )\n    }\n};","import React, { Component } from 'react';\nimport MainPage from './components/mainpage/mainpage';\nimport NavBar from './components/navbar/navbar';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n          {/* <NavBar></NavBar> */}\n          <MainPage></MainPage>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react';\nimport {\n    Collapse,\n    Navbar,\n    NavbarToggler,\n    NavbarBrand,\n    Nav,\n    NavItem,\n    NavLink, } from 'reactstrap';\n  \n\nexport default class NavBar extends Component {\n    constructor(props) {\n        super(props);\n    \n        this.toggle = this.toggle.bind(this);\n        this.state = {\n          isOpen: false\n        };\n      }\n      toggle() {\n        this.setState({\n          isOpen: !this.state.isOpen\n        });\n      }\n      render() {\n        return (\n          <div>\n            <Navbar color=\"dark\" dark expand=\"md\">\n              <NavbarBrand href=\"/\">Madison Peper</NavbarBrand>\n              <NavbarToggler onClick={this.toggle} />\n              <Collapse isOpen={this.state.isOpen} navbar>\n                <Nav className=\"ml-auto\" navbar>\n                  <NavItem>\n                    <NavLink href=\"#about-me\">About Me</NavLink>\n                  </NavItem>\n                  <NavItem>\n                    <NavLink href=\"#project-div\">My Projects</NavLink>\n                  </NavItem>\n                  <NavItem>\n                    <NavLink href=\"#/technologies/\">What I Use</NavLink>\n                  </NavItem>\n                </Nav>\n              </Collapse>\n            </Navbar>\n          </div>\n        );\n      }\n}\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// <Router basename={process.env.PUBLIC_URL}></Router>,\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}